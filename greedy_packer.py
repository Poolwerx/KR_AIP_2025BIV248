from utils import read_input
from visualize import visualize
import json
import math
import sys
import os

def rectangles_intersect(r1, r2, padding):
    return not (r1['x'] + r1['width'] + padding <= r2['x'] or
                r2['x'] + r2['width'] + padding <= r1['x'] or
                r1['y'] + r1['height'] + padding <= r2['y'] or
                r2['y'] + r2['height'] + padding <= r1['y'])

def can_place(f, x, y, placed, sheet_w, sheet_h, padding):
    if x < padding or y < padding:
        return False
    if x + f.width + padding > sheet_w or y + f.height + padding > sheet_h:
        return False

    new_rect = {'x': x, 'y': y, 'width': f.width, 'height': f.height}
    for pf in placed:
        placed_rect = {'x': pf.x, 'y': pf.y, 'width': pf.width, 'height': pf.height}
        if rectangles_intersect(new_rect, placed_rect, padding):
            return False
    return True

def try_place_with_rotation(f, placed, sheet_w, sheet_h, padding):
    """
    –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ –±–µ–∑.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ä–∞–∑–º–µ—â—ë–Ω, –∏–Ω–∞—á–µ False.
    """
    options = [(f.width, f.height, False), (f.height, f.width, True)]
    for w, h, rotated in options:
        f.width, f.height = w, h
        for y in range(sheet_h - h - padding, padding - 1, -1):
            for x in range(padding, sheet_w - w - padding + 1):
                if can_place(f, x, y, placed, sheet_w, sheet_h, padding):
                    f.x = x
                    f.y = y
                    f.rotated = rotated
                    return True
    return False

def greedy_pack(sheet_w, sheet_h, padding, figures):
    placed = []
    not_placed = []

    figures = sorted(figures, key=lambda f: max(f.width, f.height), reverse=True)

    for f in figures:
        f.rotated = False  # —Ñ–ª–∞–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞ (–¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤)
        if f.type == 'rectangle':
            if try_place_with_rotation(f, placed, sheet_w, sheet_h, padding):
                placed.append(f)
            else:
                not_placed.append(f)
        else:
            placed_flag = False
            for y in range(sheet_h - f.height - padding, padding - 1, -1):
                for x in range(padding, sheet_w - f.width - padding + 1):
                    if can_place(f, x, y, placed, sheet_w, sheet_h, padding):
                        f.x = x
                        f.y = y
                        placed.append(f)
                        placed_flag = True
                        break
                if placed_flag:
                    break
            if not placed_flag:
                not_placed.append(f)

    return placed, not_placed

def write_output(figures, path='output.json'):
    data = []
    for f in figures:
        entry = {'id': f.id, 'x': f.x, 'y': f.y}
        if hasattr(f, 'rotated'):
            entry['rotated'] = f.rotated
        data.append(entry)
    with open(path, 'w') as f:
        json.dump(data, f, indent=2)
    print(f"‚úÖ Output written to {path}.")

def calculate_area_stats(sheet_w, sheet_h, placed, total_count, not_placed, padding):
    total_area = sheet_w * sheet_h
    used_area = 0

    for f in placed:
        # –£—á–∏—Ç—ã–≤–∞–µ–º padding –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤—ã—Å–æ—Ç–µ
        pad = padding * 2

        if f.type == 'rectangle':
            used_area += (f.width + pad) * (f.height + pad)
        elif f.type == 'circle':
            used_area += math.pi * (f.radius + padding) ** 2
        elif f.type == 'triangle':
            x1, y1 = f.vertices[0]
            x2, y2 = f.vertices[1]
            x3, y3 = f.vertices[2]
            base_area = abs((x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2)
            # –£–≤–µ–ª–∏—á–∏–º –ø–ª–æ—â–∞–¥—å —Å –∑–∞–ø–∞—Å–æ–º padding
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ ‚Äî –ø—Ä–∏–±–∞–≤–∏–º padding –∫ –≥–∞–±–∞—Ä–∏—Ç–∞–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
            used_area += base_area + pad * max(f.width, f.height)
        elif f.type == 'polygon':
            verts = f.vertices
            area = 0
            n = len(verts)
            for i in range(n):
                x1, y1 = verts[i]
                x2, y2 = verts[(i + 1) % n]
                area += x1 * y2 - x2 * y1
            base_area = abs(area) / 2
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫—É ‚Äî –ø—Ä–∏–±–∞–≤–∏–º –∑–∞–ø–∞—Å
            used_area += base_area + pad * max(f.width, f.height)

    percent = used_area / total_area * 100

    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏:")
    print(f"üßæ –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ª–∏—Å—Ç–∞: {total_area}")
    print(f"üü© –ó–∞–Ω—è—Ç–∞—è –ø–ª–æ—â–∞–¥—å (—Å padding): {used_area:.2f}")
    print(f"üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {percent:.2f}%")
    print(f"‚úîÔ∏è –†–∞–∑–º–µ—â–µ–Ω–æ —Ñ–∏–≥—É—Ä: {len(placed)} –∏–∑ {total_count}")
    print(f"‚ùå –ù–µ –≤–ª–µ–∑–ª–æ: {total_count - len(placed)}")
    if not_placed:
        print(f"- ‚ùóÔ∏è ID –Ω–µ—Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä: {[f.id for f in not_placed]}")
    print()

if __name__ == "__main__":
    input_file = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, input.txt): ").strip()
    if not input_file or not os.path.exists(input_file):
        print(f"–§–∞–π–ª '{input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        sys.exit(1)

    sheet_w, sheet_h, padding, figures = read_input(input_file)
    placed, not_placed = greedy_pack(sheet_w, sheet_h, padding, figures)
    write_output(placed, path='output_greedy.json')
    calculate_area_stats(sheet_w, sheet_h, placed, len(figures), not_placed, padding)
    visualize(sheet_w, sheet_h, placed, padding, output_file='layout_greedy.png')


